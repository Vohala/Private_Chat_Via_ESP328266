#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <EEPROM.h>
#include <WebSocketsServer.h>
#include <ArduinoJson.h>
#include <Hash.h>

const char *ssid = "Vohala";
const char *password = "Vohala_Horizon";

ESP8266WebServer server(80);
WebSocketsServer webSocket = WebSocketsServer(81);  


struct User {
  String name;
  String email;
  String password;
};


struct UserSession {
  String sessionId;
  User user;
};


#define MAX_SESSIONS 10
UserSession sessions[MAX_SESSIONS];
int sessionCount = 0;


struct ClientSession {
  uint8_t client_num;
  String sessionId;
};

#define MAX_CLIENTS 10
ClientSession clientSessions[MAX_CLIENTS];
int clientSessionCount = 0;

String chatHistory = "";  


#define EEPROM_SIZE 1024
#define USER_RECORD_SIZE 96  
#define MAX_USERS ((EEPROM_SIZE - 1) / USER_RECORD_SIZE)  
#define EEPROM_INIT_FLAG 0x55  

void setup() {
  Serial.begin(115200);
  EEPROM.begin(EEPROM_SIZE); 

  
  randomSeed(analogRead(0));

  
  if (EEPROM.read(0) != EEPROM_INIT_FLAG) {
    clearEEPROM();
  }

  WiFi.mode(WIFI_AP);
  WiFi.softAP(ssid, password);

  Serial.println("WiFi AP started.");
  Serial.print("AP IP Address: ");
  Serial.println(WiFi.softAPIP());

  
  webSocket.begin();
  webSocket.onEvent(webSocketEvent);

  
  server.on("/", HTTP_GET, handleRoot);
  server.on("/register", HTTP_GET, displayRegisterPage);
  server.on("/register", HTTP_POST, handleRegister);
  server.on("/login", HTTP_POST, handleLogin);
  server.on("/logout", HTTP_GET, handleLogout);

  server.begin();
  Serial.println("HTTP server started");
}

void loop() {
  server.handleClient();
  webSocket.loop();
}


void clearEEPROM() {
  for (int i = 0; i < EEPROM_SIZE; i++) {
    EEPROM.write(i, 0);
  }
  EEPROM.write(0, EEPROM_INIT_FLAG);  
  EEPROM.commit();
  Serial.println("EEPROM cleared and initialized");
}


void handleRoot() {
  String sessionId = getSessionIdFromCookie();
  if (sessionId != "") {
    UserSession *session = getSessionById(sessionId);
    if (session != nullptr) {
      displayChatPage(session->user);
      return;
    }
  }
  displayLoginPage();
}


void displayRegisterPage() {
  String html = R"=====(
  <html><body>
  <h1>Register</h1>
  <form action="/register" method="post">
    Name: <input type="text" name="name"><br>
    Email: <input type="text" name="email"><br>
    Password: <input type="password" name="password"><br>
    <input type="submit" value="Register">
  </form>
  <p>Already have an account? <a href="/">Login</a></p>
  </body></html>
  )=====";

  server.send(200, "text/html", html);
}


void displayLoginPage() {
  String html = R"=====(
  <html><body>
  <h1>Login</h1>
  <form action="/login" method="post">
    Email: <input type="text" name="email"><br>
    Password: <input type="password" name="password"><br>
    <input type="submit" value="Login">
  </form>
  <p>Don't have an account? <a href="/register">Sign Up</a></p>
  </body></html>
  )=====";

  server.send(200, "text/html", html);
}


void handleRegister() {
  if (server.hasArg("name") && server.hasArg("email") && server.hasArg("password")) {
    String name = server.arg("name");
    String email = server.arg("email");
    String password = server.arg("password");

    
    if (findUserByEmail(email) != -1) {
      server.send(200, "text/html", "<h3>Email is already registered. <a href=\"/\">Login here</a></h3>");
      return;
    }

    
    bool saveResult = saveUserToEEPROM(name, email, password);
    if (saveResult) {
      server.send(200, "text/html", "<h3>Registration successful! <a href=\"/\">Login here</a></h3>");
    } else {
      server.send(200, "text/html", "<h3>Registration failed: User limit reached!</h3>");
    }
  } else {
    server.send(400, "text/html", "<h3>All fields are required!</h3>");
  }
}


void handleLogin() {
  if (server.hasArg("email") && server.hasArg("password")) {
    String email = server.arg("email");
    String password = server.arg("password");

    int userIndex = findUserByEmail(email);
    if (userIndex != -1 && readEEPROMString(1 + userIndex * USER_RECORD_SIZE + 60, 30) == password) {
      User user;
      user.name = readEEPROMString(1 + userIndex * USER_RECORD_SIZE, 30);
      user.email = email;
      user.password = password;

      
      String sessionId = generateSessionId();

      
      if (sessionCount < MAX_SESSIONS) {
        sessions[sessionCount].sessionId = sessionId;
        sessions[sessionCount].user = user;
        sessionCount++;

        
        server.sendHeader("Set-Cookie", "sessionId=" + sessionId + "; Path=/");
        displayChatPage(user);
      } else {
        server.send(500, "text/html", "<h3>Server session limit reached. Please try again later.</h3>");
      }
    } else {
      server.send(403, "text/html", "<h3>Invalid credentials! <a href=\"/\">Try again</a></h3>");
    }
  } else {
    server.send(400, "text/html", "<h3>Missing email or password.</h3>");
  }
}


void displayChatPage(User user) {
  String sessionId = getSessionIdFromCookie();
  String html = "<html><body><h1>Welcome, " + user.name + "</h1>";
  html += R"=====(
  <div id="chatBox" style="height: 200px; overflow-y: auto; border: 1px solid gray;"></div>
  <input type="text" id="messageInput"><button onclick="sendMessage()">Send</button>
  <br><a href="/logout">Logout</a>
  <script>
    function getCookie(name) {
      var value = "; " + document.cookie;
      var parts = value.split("; " + name + "=");
      if (parts.length == 2) return parts.pop().split(";").shift();
    }
    var sessionId = getCookie('sessionId');
    var socket = new WebSocket('ws://' + window.location.hostname + ':81/');
    socket.onopen = function() {
      socket.send(JSON.stringify({ type: 'session', sessionId: sessionId }));
    };
    socket.onmessage = function(event) {
      var chatBox = document.getElementById('chatBox');
      chatBox.innerHTML += event.data;
      chatBox.scrollTop = chatBox.scrollHeight;
    };
    function sendMessage() {
      var input = document.getElementById('messageInput');
      var message = input.value;
      if (message !== '') {
        socket.send(JSON.stringify({ type: 'message', message: message }));
        input.value = '';
      }
    }
  </script>
  </body></html>
  )=====";

  server.send(200, "text/html", html);
}


void handleLogout() {
  String sessionId = getSessionIdFromCookie();
  if (sessionId != "") {
    
    for (int i = 0; i < sessionCount; i++) {
      if (sessions[i].sessionId == sessionId) {
        for (int j = i; j < sessionCount - 1; j++) {
          sessions[j] = sessions[j + 1];
        }
        sessionCount--;
        break;
      }
    }

    server.sendHeader("Set-Cookie", "sessionId=deleted; expires=Thu, 01 Jan 1970 00:00:00 GMT; Path=/");
  }
  server.send(200, "text/html", "<h3>Logged out successfully. <a href=\"/\">Login again</a></h3>");
}

bool saveUserToEEPROM(String name, String email, String password) {
  Serial.println("Attempting to save user to EEPROM...");
  for (int i = 0; i < MAX_USERS; i++) {
    int addr = 1 + i * USER_RECORD_SIZE;  
    String storedEmail = readEEPROMString(addr + 30, 30);
    Serial.print("Checking slot ");
    Serial.print(i);
    Serial.print(": ");
    Serial.println(storedEmail);

    if (storedEmail == "") {  
      Serial.print("Empty slot found at index ");
      Serial.println(i);
      writeEEPROMString(addr, name, 30);
      writeEEPROMString(addr + 30, email, 30);
      writeEEPROMString(addr + 60, password, 30);
      EEPROM.commit();
      Serial.println("User saved successfully!");
      return true;
    }
  }
  Serial.println("No empty slot found; user limit reached.");
  return false;
}

int findUserByEmail(String email) {
  Serial.println("Searching for user by email...");
  for (int i = 0; i < MAX_USERS; i++) {
    int addr = 1 + i * USER_RECORD_SIZE + 30;  
    String storedEmail = readEEPROMString(addr, 30);
    Serial.print("Checking slot ");
    Serial.print(i);
    Serial.print(": ");
    Serial.println(storedEmail);

    if (storedEmail == email) {
      Serial.print("User found at slot ");
      Serial.println(i);
      return i;  
    }
  }
  Serial.println("User not found.");
  return -1;  
}

void webSocketEvent(uint8_t client_num, WStype_t type, uint8_t * payload, size_t length) {
  switch (type) {
    case WStype_DISCONNECTED:
      Serial.printf("[%u] Disconnected!\n", client_num);
      for (int i = 0; i < clientSessionCount; i++) {
        if (clientSessions[i].client_num == client_num) {
          for (int j = i; j < clientSessionCount - 1; j++) {
            clientSessions[j] = clientSessions[j + 1];
          }
          clientSessionCount--;
          break;
        }
      }
      break;
    case WStype_CONNECTED: {
      IPAddress ip = webSocket.remoteIP(client_num);
      Serial.printf("[%u] Connected from %s\n", client_num, ip.toString().c_str());
    }
      break;
    case WStype_TEXT: {
      String message = String((char *)payload);
      Serial.printf("[%u] Received Text: %s\n", client_num, message.c_str());

      DynamicJsonDocument doc(256);
      DeserializationError error = deserializeJson(doc, message);
      if (error) {
        Serial.print("deserializeJson() failed: ");
        Serial.println(error.c_str());
        return;
      }

      String type = doc["type"];
      if (type == "session") {
        String sessionId = doc["sessionId"];
        UserSession *session = getSessionById(sessionId);
        if (session != nullptr) {
          if (clientSessionCount < MAX_CLIENTS) {
            clientSessions[clientSessionCount].client_num = client_num;
            clientSessions[clientSessionCount].sessionId = sessionId;
            clientSessionCount++;

            webSocket.sendTXT(client_num, chatHistory);
          } else {
            webSocket.disconnect(client_num);
          }
        } else {
          webSocket.disconnect(client_num);
        }
      } else if (type == "message") {
        String chatMessage = doc["message"];
        String sessionId = "";
        for (int i = 0; i < clientSessionCount; i++) {
          if (clientSessions[i].client_num == client_num) {
            sessionId = clientSessions[i].sessionId;
            break;
          }
        }

        UserSession *session = getSessionById(sessionId);
        if (session != nullptr) {
          String fullMessage = "<b>" + session->user.name + ":</b> " + chatMessage + "<br>";
          chatHistory += fullMessage;

          webSocket.broadcastTXT(fullMessage);
        } else {
          webSocket.disconnect(client_num);
        }
      }
    }
      break;
    default:
      break;
  }
}

void writeEEPROMString(int addr, String data, int length) {
  for (int i = 0; i < length; i++) {
    EEPROM.write(addr + i, i < data.length() ? data[i] : 0);
  }
}

String readEEPROMString(int addr, int length) {
  String data = "";
  for (int i = 0; i < length; i++) {
    char ch = EEPROM.read(addr + i);
    if (ch == 0) break;
    data += ch;
  }
  return data;
}

String generateSessionId() {
  String chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  String sessionId = "";
  for (int i = 0; i < 16; i++) {
    sessionId += chars[random(0, chars.length())];
  }
  return sessionId;
}

String getSessionIdFromCookie() {
  if (server.hasHeader("Cookie")) {
    String cookie = server.header("Cookie");
    int pos = cookie.indexOf("sessionId=");
    if (pos != -1) {
      int start = pos + strlen("sessionId=");
      int end = cookie.indexOf(";", start);
      if (end == -1) end = cookie.length();
      return cookie.substring(start, end);
    }
  }
  return "";
}

UserSession* getSessionById(String sessionId) {
  for (int i = 0; i < sessionCount; i++) {
    if (sessions[i].sessionId == sessionId) {
      return &sessions[i];
    }
  }
  return nullptr;
}
