#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <EEPROM.h>
#include <WebSocketsServer.h>
#include <ArduinoJson.h>
#include <Hash.h>
#include <SPI.h>
#include <RHMesh.h>
#include <RH_RF95.h>

#define NODE_ID 1
#define RF95_FREQ 433.0
#define RFM95_CS D2
#define RFM95_INT D1
#define RFM95_RST -1

RH_RF95 rf95(RFM95_CS, RFM95_INT);
RHMesh manager(rf95, NODE_ID);

const char *ssid = "Vohala";
const char *password = "Vohala_Horizon";

ESP8266WebServer server(80);
WebSocketsServer webSocket = WebSocketsServer(81);

struct User {
  String name;
  String email;
  String password;
};

struct UserSession {
  String sessionId;
  User user;
};

#define MAX_SESSIONS 10
UserSession sessions[MAX_SESSIONS];
int sessionCount = 0;

struct ClientSession {
  uint8_t client_num;
  String sessionId;
};

#define MAX_CLIENTS 10
ClientSession clientSessions[MAX_CLIENTS];
int clientSessionCount = 0;

String chatHistory = "[]";

#define EEPROM_SIZE 1024
#define USER_RECORD_SIZE 96
#define MAX_USERS ((EEPROM_SIZE - 1) / USER_RECORD_SIZE)
#define EEPROM_INIT_FLAG 0x55

void setup() {
  Serial.begin(115200);
  delay(1000);

  Serial.println("Starting setup...");

  EEPROM.begin(EEPROM_SIZE);

  randomSeed(analogRead(0));

  if (EEPROM.read(0) != EEPROM_INIT_FLAG) {
    clearEEPROM();
  }

  WiFi.mode(WIFI_AP);
  WiFi.softAP(ssid, password);

  Serial.println("Wi-Fi AP started.");
  Serial.print("AP IP Address: ");
  Serial.println(WiFi.softAPIP());

  webSocket.begin();
  webSocket.onEvent(webSocketEvent);

  server.on("/", HTTP_GET, handleRoot);
  server.on("/register", HTTP_GET, displayRegisterPage);
  server.on("/register", HTTP_POST, handleRegister);
  server.on("/login", HTTP_POST, handleLogin);
  server.on("/logout", HTTP_GET, handleLogout);

  server.begin();
  Serial.println("HTTP server started");

  Serial.println("Initializing LoRa module...");
  if (!manager.init()) {
    Serial.println("RHMesh Manager failed to initialize");
  }

  if (!rf95.setFrequency(RF95_FREQ)) {
    Serial.println("Failed to set frequency");
  }
  rf95.setTxPower(14);

  Serial.println("LoRa initialized successfully.");
}

void loop() {
  server.handleClient();
  webSocket.loop();

  meshReceive();
}

void clearEEPROM() {
  for (int i = 0; i < EEPROM_SIZE; i++) {
    EEPROM.write(i, 0);
  }
  EEPROM.write(0, EEPROM_INIT_FLAG);
  EEPROM.commit();
  Serial.println("EEPROM cleared and initialized");
}

void handleRoot() {
  String sessionId = getSessionIdFromCookie();
  if (sessionId != "") {
    UserSession *session = getSessionById(sessionId);
    if (session != nullptr) {
      displayChatPage(session->user);
      return;
    }
  }
  displayLoginPage();
}

void displayRegisterPage() {
  String html = "<!DOCTYPE html><html><head><title>Vohala Messenger App - Register</title>";
  html += "<style>";
  html += "body { font-family: Arial, sans-serif; background-color: #f2f2f2; margin: 0; padding: 0; }";
  html += ".container { width: 100%; max-width: 400px; margin: auto; background-color: #fff; padding: 20px; margin-top: 50px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }";
  html += "h1, h2 { text-align: center; color: #333; }";
  html += "input[type=text], input[type=password] { width: 100%; padding: 12px 20px; margin: 8px 0; display: inline-block; border: 1px solid #ccc; box-sizing: border-box; }";
  html += "button { background-color: #4CAF50; color: white; padding: 14px 0; margin: 8px 0; border: none; cursor: pointer; width: 100%; font-size: 16px; }";
  html += "button:hover { opacity: 0.8; }";
  html += ".link { text-align: center; margin-top: 20px; }";
  html += ".link a { color: #4CAF50; text-decoration: none; }";
  html += "</style></head><body>";
  html += "<div class=\"container\">";
  html += "<h1>Vohala Messenger App</h1>";
  html += "<h2>Register</h2>";
  html += "<form action=\"/register\" method=\"post\">";
  html += "<label for=\"name\"><b>Name</b></label>";
  html += "<input type=\"text\" placeholder=\"Enter Name\" name=\"name\" required>";
  html += "<label for=\"email\"><b>Email</b></label>";
  html += "<input type=\"text\" placeholder=\"Enter Email\" name=\"email\" required>";
  html += "<label for=\"password\"><b>Password</b></label>";
  html += "<input type=\"password\" placeholder=\"Enter Password\" name=\"password\" required>";
  html += "<button type=\"submit\">Register</button>";
  html += "</form>";
  html += "<div class=\"link\">";
  html += "<p>Already have an account? <a href=\"/\">Login</a></p>";
  html += "</div>";
  html += "</div></body></html>";

  server.send(200, "text/html", html);
}

void displayLoginPage() {
  String html = "<!DOCTYPE html><html><head><title>Vohala Messenger App - Login</title>";
  html += "<style>";
  html += "body { font-family: Arial, sans-serif; background-color: #f2f2f2; margin: 0; padding: 0; }";
  html += ".container { width: 100%; max-width: 400px; margin: auto; background-color: #fff; padding: 20px; margin-top: 50px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }";
  html += "h1, h2 { text-align: center; color: #333; }";
  html += "input[type=text], input[type=password] { width: 100%; padding: 12px 20px; margin: 8px 0; display: inline-block; border: 1px solid #ccc; box-sizing: border-box; }";
  html += "button { background-color: #4CAF50; color: white; padding: 14px 0; margin: 8px 0; border: none; cursor: pointer; width: 100%; font-size: 16px; }";
  html += "button:hover { opacity: 0.8; }";
  html += ".link { text-align: center; margin-top: 20px; }";
  html += ".link a { color: #4CAF50; text-decoration: none; }";
  html += "</style></head><body>";
  html += "<div class=\"container\">";
  html += "<h1>Vohala Messenger App</h1>";
  html += "<h2>Login</h2>";
  html += "<form action=\"/login\" method=\"post\">";
  html += "<label for=\"email\"><b>Email</b></label>";
  html += "<input type=\"text\" placeholder=\"Enter Email\" name=\"email\" required>";
  html += "<label for=\"password\"><b>Password</b></label>";
  html += "<input type=\"password\" placeholder=\"Enter Password\" name=\"password\" required>";
  html += "<button type=\"submit\">Login</button>";
  html += "</form>";
  html += "<div class=\"link\">";
  html += "<p>Don't have an account? <a href=\"/register\">Sign Up</a></p>";
  html += "</div>";
  html += "</div></body></html>";

  server.send(200, "text/html", html);
}

void handleRegister() {
  if (server.hasArg("name") && server.hasArg("email") && server.hasArg("password")) {
    String name = server.arg("name");
    String email = server.arg("email");
    String password = server.arg("password");

    if (findUserByEmail(email) != -1) {
      server.send(200, "text/html", "<h3>Email is already registered. <a href=\"/\">Login here</a></h3>");
      return;
    }

    bool saveResult = saveUserToEEPROM(name, email, password);
    if (saveResult) {
      server.send(200, "text/html", "<h3>Registration successful! <a href=\"/\">Login here</a></h3>");
    } else {
      server.send(200, "text/html", "<h3>Registration failed: User limit reached!</h3>");
    }
  } else {
    server.send(400, "text/html", "<h3>All fields are required!</h3>");
  }
}

void handleLogin() {
  if (server.hasArg("email") && server.hasArg("password")) {
    String email = server.arg("email");
    String password = server.arg("password");

    int userIndex = findUserByEmail(email);
    if (userIndex != -1 && readEEPROMString(1 + userIndex * USER_RECORD_SIZE + 60, 30) == password) {
      User user;
      user.name = readEEPROMString(1 + userIndex * USER_RECORD_SIZE, 30);
      user.email = email;
      user.password = password;

      String sessionId = generateSessionId();

      if (sessionCount < MAX_SESSIONS) {
        sessions[sessionCount].sessionId = sessionId;
        sessions[sessionCount].user = user;
        sessionCount++;

        server.sendHeader("Set-Cookie", "sessionId=" + sessionId + "; Path=/");
        displayChatPage(user);
      } else {
        server.send(500, "text/html", "<h3>Server session limit reached. Please try again later.</h3>");
      }
    } else {
      server.send(403, "text/html", "<h3>Invalid credentials! <a href=\"/\">Try again</a></h3>");
    }
  } else {
    server.send(400, "text/html", "<h3>Missing email or password.</h3>");
  }
}

void displayChatPage(User user) {
  String sessionId = getSessionIdFromCookie();

  String html = "<!DOCTYPE html><html><head><title>Vohala Messenger App - Chat</title>";
  html += "<style>";
  html += "body { font-family: Arial, sans-serif; background-color: #e6e6e6; margin: 0; padding: 0; }";
  html += ".chat-container { max-width: 600px; margin: auto; margin-top: 50px; background-color: #fff; box-shadow: 0 0 10px rgba(0,0,0,0.1); }";
  html += ".chat-header { background-color: #4CAF50; color: white; padding: 15px; text-align: center; }";
  html += "#chatBox { height: 400px; overflow-y: auto; padding: 15px; border-bottom: 1px solid #ddd; }";
  html += ".message { margin-bottom: 10px; }";
  html += ".message .username { font-weight: bold; }";
  html += ".chat-input { display: flex; padding: 10px; border-top: 1px solid #ddd; }";
  html += ".chat-input input[type=\"text\"] { flex: 1; padding: 10px; font-size: 16px; border: 1px solid #ccc; border-right: none; border-radius: 4px 0 0 4px; }";
  html += ".chat-input button { padding: 10px; background-color: #4CAF50; color: white; border: none; font-size: 16px; cursor: pointer; border-radius: 0 4px 4px 0; }";
  html += ".chat-input button:hover { opacity: 0.8; }";
  html += ".logout { text-align: center; padding: 10px; }";
  html += ".logout a { color: #4CAF50; text-decoration: none; font-size: 16px; }";
  html += "</style>";
  html += "</head><body>";
  html += "<div class=\"chat-container\">";
  html += "<div class=\"chat-header\"><h2>Vohala Messenger App</h2><h3>Welcome, " + user.name + "</h3></div>";
  html += "<div id=\"chatBox\"></div>";
  html += "<div class=\"chat-input\">";
  html += "<input type=\"text\" id=\"messageInput\" placeholder=\"Type your message here...\" onkeydown=\"if(event.keyCode==13) sendMessage();\">";
  html += "<button onclick=\"sendMessage()\">Send</button>";
  html += "</div>";
  html += "</div>";
  html += "<div class=\"logout\"><a href=\"/logout\">Logout</a></div>";
  html += "<script>";
  html += "function getCookie(name) { var value = \"; \" + document.cookie; var parts = value.split(\"; \" + name + \"=\"); if (parts.length == 2) return parts.pop().split(\";\").shift(); }";
  html += "var sessionId = getCookie('sessionId');";
  html += "var socket = new WebSocket('ws://' + window.location.hostname + ':81/');";
  html += "socket.onopen = function() { socket.send(JSON.stringify({ type: 'session', sessionId: sessionId })); };";
  html += "socket.onmessage = function(event) { var data = JSON.parse(event.data); if (data.type === 'chatHistory') { data.messages.forEach(function(msg) { displayMessage(msg.username, msg.message); }); } else if (data.type === 'message') { displayMessage(data.username, data.message); } };";
  html += "function displayMessage(username, message) { var chatBox = document.getElementById('chatBox'); var messageDiv = document.createElement('div'); messageDiv.className = 'message'; messageDiv.innerHTML = '<span class=\"username\">' + username + ':</span> ' + message; chatBox.appendChild(messageDiv); chatBox.scrollTop = chatBox.scrollHeight; }";
  html += "function sendMessage() { var input = document.getElementById('messageInput'); var message = input.value.trim(); if (message !== '') { socket.send(JSON.stringify({ type: 'message', message: message })); input.value = ''; } }";
  html += "</script>";
  html += "</body></html>";

  server.send(200, "text/html", html);
}

void handleLogout() {
  String sessionId = getSessionIdFromCookie();
  if (sessionId != "") {
    for (int i = 0; i < sessionCount; i++) {
      if (sessions[i].sessionId == sessionId) {
        for (int j = i; j < sessionCount - 1; j++) {
          sessions[j] = sessions[j + 1];
        }
        sessionCount--;
        break;
      }
    }
    server.sendHeader("Set-Cookie", "sessionId=deleted; expires=Thu, 01 Jan 1970 00:00:00 GMT; Path=/");
  }
  server.send(200, "text/html", "<h3>Logged out successfully. <a href=\"/\">Login again</a></h3>");
}

bool saveUserToEEPROM(String name, String email, String password) {
  Serial.println("Attempting to save user to EEPROM...");
  for (int i = 0; i < MAX_USERS; i++) {
    int addr = 1 + i * USER_RECORD_SIZE;
    String storedEmail = readEEPROMString(addr + 30, 30);
    Serial.print("Checking slot ");
    Serial.print(i);
    Serial.print(": ");
    Serial.println(storedEmail);

    if (storedEmail == "") {
      Serial.print("Empty slot found at index ");
      Serial.println(i);
      writeEEPROMString(addr, name, 30);
      writeEEPROMString(addr + 30, email, 30);
      writeEEPROMString(addr + 60, password, 30);
      EEPROM.commit();
      Serial.println("User saved successfully!");
      return true;
    }
  }
  Serial.println("No empty slot found; user limit reached.");
  return false;
}

int findUserByEmail(String email) {
  Serial.println("Searching for user by email...");
  for (int i = 0; i < MAX_USERS; i++) {
    int addr = 1 + i * USER_RECORD_SIZE + 30;
    String storedEmail = readEEPROMString(addr, 30);
    Serial.print("Checking slot ");
    Serial.print(i);
    Serial.print(": ");
    Serial.println(storedEmail);

    if (storedEmail == email) {
      Serial.print("User found at slot ");
      Serial.println(i);
      return i;
    }
  }
  Serial.println("User not found.");
  return -1;
}

void webSocketEvent(uint8_t client_num, WStype_t type, uint8_t * payload, size_t length) {
  switch (type) {
    case WStype_DISCONNECTED:
      Serial.printf("[%u] Disconnected!\n", client_num);
      for (int i = 0; i < clientSessionCount; i++) {
        if (clientSessions[i].client_num == client_num) {
          for (int j = i; j < clientSessionCount - 1; j++) {
            clientSessions[j] = clientSessions[j + 1];
          }
          clientSessionCount--;
          break;
        }
      }
      break;
    case WStype_CONNECTED: {
      IPAddress ip = webSocket.remoteIP(client_num);
      Serial.printf("[%u] Connected from %s\n", client_num, ip.toString().c_str());
    }
      break;
    case WStype_TEXT: {
      String message = String((char *)payload);
      Serial.printf("[%u] Received Text: %s\n", client_num, message.c_str());

      DynamicJsonDocument doc(256);
      DeserializationError error = deserializeJson(doc, message);
      if (error) {
        Serial.print("deserializeJson() failed: ");
        Serial.println(error.c_str());
        return;
      }

      String type = doc["type"];
      if (type == "session") {
        String sessionId = doc["sessionId"];
        UserSession *session = getSessionById(sessionId);
        if (session != nullptr) {
          if (clientSessionCount < MAX_CLIENTS) {
            clientSessions[clientSessionCount].client_num = client_num;
            clientSessions[clientSessionCount].sessionId = sessionId;
            clientSessionCount++;

            String chatHistoryMessage = createChatHistoryMessage();
            webSocket.sendTXT(client_num, chatHistoryMessage);
          } else {
            webSocket.disconnect(client_num);
          }
        } else {
          webSocket.disconnect(client_num);
        }
      } else if (type == "message") {
        String chatMessage = doc["message"];
        String sessionId = "";
        for (int i = 0; i < clientSessionCount; i++) {
          if (clientSessions[i].client_num == client_num) {
            sessionId = clientSessions[i].sessionId;
            break;
          }
        }

        UserSession *session = getSessionById(sessionId);
        if (session != nullptr) {
          DynamicJsonDocument msgDoc(256);
          msgDoc["type"] = "message";
          msgDoc["username"] = session->user.name;
          msgDoc["message"] = chatMessage;
          String fullMessage;
          serializeJson(msgDoc, fullMessage);

          appendToChatHistory(session->user.name, chatMessage);

          webSocket.broadcastTXT(fullMessage);

          sendLoRaMessage(fullMessage);
        } else {
          webSocket.disconnect(client_num);
        }
      }
    }
      break;
    default:
      break;
  }
}

void sendLoRaMessage(String message) {
  uint8_t data[RH_MESH_MAX_MESSAGE_LEN];
  message.getBytes(data, RH_MESH_MAX_MESSAGE_LEN);

  uint8_t dest = RH_BROADCAST_ADDRESS;
  if (manager.sendtoWait(data, message.length(), dest) == RH_ROUTER_ERROR_NONE) {
    Serial.println("Message sent over LoRa mesh network");
  } else {
    Serial.println("Failed to send message over LoRa mesh network");
  }
}

void meshReceive() {
  uint8_t buf[RH_MESH_MAX_MESSAGE_LEN];
  uint8_t len = sizeof(buf);
  uint8_t from;

  if (manager.recvfromAck(buf, &len, &from)) {
    String received = String((char*)buf);
    Serial.print("Received LoRa message from node ");
    Serial.print(from);
    Serial.print(": ");
    Serial.println(received);

    DynamicJsonDocument doc(256);
    DeserializationError error = deserializeJson(doc, received);
    if (error) {
      Serial.print("LoRa deserializeJson() failed: ");
      Serial.println(error.c_str());
      return;
    }

    String type = doc["type"];
    if (type == "message") {
      String username = doc["username"];
      String message = doc["message"];

      appendToChatHistory(username, message);

      DynamicJsonDocument msgDoc(256);
      msgDoc["type"] = "message";
      msgDoc["username"] = username;
      msgDoc["message"] = message;
      String fullMessage;
      serializeJson(msgDoc, fullMessage);

      webSocket.broadcastTXT(fullMessage);
    }
  }
}

String createChatHistoryMessage() {
  DynamicJsonDocument doc(4096);
  doc["type"] = "chatHistory";
  deserializeJson(doc["messages"], chatHistory);
  String message;
  serializeJson(doc, message);
  return message;
}

void appendToChatHistory(String username, String message) {
  DynamicJsonDocument historyDoc(4096);
  deserializeJson(historyDoc, chatHistory);

  JsonArray messages = historyDoc.as<JsonArray>();
  if (!messages) {
    messages = historyDoc.to<JsonArray>();
  }

  JsonObject newMessage = messages.createNestedObject();
  newMessage["username"] = username;
  newMessage["message"] = message;

  if (messages.size() > 50) {
    messages.remove(0);
  }

  chatHistory = "";
  serializeJson(messages, chatHistory);
}

void writeEEPROMString(int addr, String data, int length) {
  for (int i = 0; i < length; i++) {
    EEPROM.write(addr + i, i < data.length() ? data[i] : 0);
  }
}

String readEEPROMString(int addr, int length) {
  String data = "";
  for (int i = 0; i < length; i++) {
    char ch = EEPROM.read(addr + i);
    if (ch == 0) break;
    data += ch;
  }
  return data;
}

String generateSessionId() {
  String chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  String sessionId = "";
  for (int i = 0; i < 16; i++) {
    sessionId += chars[random(0, chars.length())];
  }
  return sessionId;
}

String getSessionIdFromCookie() {
  if (server.hasHeader("Cookie")) {
    String cookie = server.header("Cookie");
    int pos = cookie.indexOf("sessionId=");
    if (pos != -1) {
      int start = pos + strlen("sessionId=");
      int end = cookie.indexOf(";", start);
      if (end == -1) end = cookie.length();
      return cookie.substring(start, end);
    }
  }
  return "";
}

UserSession* getSessionById(String sessionId) {
  for (int i = 0; i < sessionCount; i++) {
    if (sessions[i].sessionId == sessionId) {
      return &sessions[i];
    }
  }
  return nullptr;
}

